#+TITLE:   Hodur Lacinia Schema
#+AUTHOR:  Tiago Luchini
#+EMAIL:   info@tiagoluchini.eu
#+OPTIONS: toc:t

TBD: fix this token
[[https://circleci.com/gh/luchiniatwork/hodur-lacinia-schema.svg?style=shield&circle-token=]]

Hodur is a descriptive domain modeling approach and related collection
of libraries for Clojure.

By using Hodur you can define your domain model as data, parse and
validate it, and then either consume your model via an API making your
apps respond to the defined model or use one of the many plugins to
help you achieve mechanical, repetitive results faster and in a purely
functional manner.

* Motivation

  For a deeper insight into the motivations behind Hodur, check the
  [[https://github.com/luchiniatwork/hodur-engine/blob/master/docs/MOTIVATION.org][motivation doc]].

* Getting Started (TBD - review this)

  Hodur has a highly modular architecture. [[https://github.com/luchiniatwork/hodur-engine][Hodur Engine]] is always
  required as it provides the meta-database functions and APIs
  consumed by plugins.

  Therefore, refer the [[https://github.com/luchiniatwork/hodur-engine#getting-started][Hodur Engine's Getting Started]] first and then
  return here for Lacinia-specific setup.

  After having set up ~hodur-engine~ as described above, we are also
  need to add ~hodur-lacinia-schema~, a plugin that creates Lacinia
  Schemas out of your model to the ~deps.edn~ file:

#+BEGIN_SRC clojure
  {:deps {:hodur/engine         {:mvn/version "0.1.0"}
          :hodur/lacinia-schema {:mvn/version "0.1.0"}}}
#+END_SRC

  You should ~require~ it any way you see fit:

#+BEGIN_SRC clojure
  (require '[hodur-lacinia-schema.core :as hodur-lacinia])
#+END_SRC

  Let's expand our ~Person~ model from the original getting started by
  "tagging" the ~Person~ entity for Lacinia. You can read more about
  the concept of tagging for plugins in the sessions below but, in
  short, this is the way we, model designers, use to specify which
  entities we want to be exposed to which plugins.

#+BEGIN_SRC clojure
  (def meta-db (hodur/init-schema
                '[^{:lacinia/tag-recursive true}
                  Person
                  [^String first-name
                   ^String last-name]]))
#+END_SRC

  The ~hodur-lacinia-schema~ plugin exposes a function called ~schema~
  that generates your model as a Lacinia schema payload:

#+BEGIN_SRC clojure
  (def lacinia-schema (hodur-lacinia/schema meta-db))
#+END_SRC

  When you inspect ~datomic-schema~, this is what you have:

#+BEGIN_SRC clojure
  {:objects
   {:Person
    {:fields
     {:firstName {:type (non-null String)},
      :lastName {:type (non-null String)}}}}}
#+END_SRC

  Assuming Lacinia's ~com.walmartlabs.lacinia.schema~ is bound to
  ~schema~, you can initialize your instance by compiling the schema like this:

#+BEGIN_SRC clojure
  (def compiled-schema (-> lacinia-schema
                           schema/compile))
#+END_SRC

  Most certainly you will have some resolvers defined in your schema
  (say ~:person-query/resolver~ that you want to bind to function
  ~person-query-resolver~). In this case, attach the resolvers using
  Lacinia's ~com.walmartlabs.lacinia.util/attach-resolvers~ function
  (shown in this next example as bound to ~util/attach-resolvers~:

#+BEGIN_SRC clojure
  (def compiled-schema (-> lacinia-schema
                           (util/attach-resolvers
                            {:person-query/resolver person-query-resolver})
                           schema/compile))
#+END_SRC

* Properly tagging with lacinia and/or datomic

TBD: what does it mean in practice


* All markers (TBD - this is messy)


1. ~:lacinia->datomic.query/type :pull~

- must be in a field in a ~lacinia/query~
- both entity and field must be lacinia tagged
- will look for params ~:lacinia->datomic.param/lookup~ or ~:lacinia->datomic.param/eid~

2. ~:lacinia->datomic.query/type :find~

- must be in a field in a ~lacinia/query~
- both entity and field must be lacinia tagged

3. "Fields resolvers"

- will look for params ~:lacinia->datomic.field/lookup~ or ~:lacinia->datomic.field/reverse-lookup~



~:lacinia->datomic.field/dbid true~

:lacinia->datomic.field/depends-on [:employee/first-name
                                           :employee/last-name]

:lacinia->datomic.field/reverse-lookup :employee/supervisor

:lacinia->datomic.field/lookup :employee/projects




:lacinia->datomic.param/offset true

:lacinia->datomic.param/limit true

:lacinia->datomic.param/lookup :employee/email

:lacinia->datomic.param/transform user/transform-email

:lacinia->datomic.param/eid true

:lacinia->datomic.param/where-builder user/build-employee-name-search-where




:lacinia->datomic.input/map-to Employee

:lacinia->datomic.input/attach-from Project

:lacinia->datomic.input/dbid true

:lacinia->datomic.input/delete-from Project




:lacinia->datomic.mutation/type :upsert

:lacinia->datomic.mutation/type :add-to

:lacinia->datomic.mutation/type :attach-to

:lacinia->datomic.mutation/type :delete

* Bugs

  If you find a bug, submit a [[https://github.com/luchiniatwork/hodur-lacinia-datomic-adapter/issues][GitHub issue]].

* Help!

  This project is looking for team members who can help this project
  succeed! If you are interested in becoming a team member please open
  an issue.

* License

  Copyright Â© 2018 Tiago Luchini

  Distributed under the MIT License (see [[./LICENSE][LICENSE]]).
